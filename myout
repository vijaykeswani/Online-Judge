  //Applying NB Mask No. 1
  kernel.at<float>(0,0)=1.000000;
  kernel.at<float>(0,1)=1.000000;
  kernel.at<float>(0,2)=1.000000;
  kernel.at<float>(0,3)=1.000000;
  kernel.at<float>(0,4)=1.000000;
  kernel.at<float>(1,0)=1.000000;
  kernel.at<float>(1,1)=1.000000;
  kernel.at<float>(1,2)=1.000000;
  kernel.at<float>(1,3)=1.000000;
  kernel.at<float>(1,4)=1.000000;
  kernel.at<float>(2,0)=1.000000;
  kernel.at<float>(2,1)=1.000000;
  kernel.at<float>(2,2)=1.000000;
  kernel.at<float>(2,3)=1.000000;
  kernel.at<float>(2,4)=1.000000;
  kernel.at<float>(3,0)=1.000000;
  kernel.at<float>(3,1)=1.000000;
  kernel.at<float>(3,2)=1.000000;
  kernel.at<float>(3,3)=1.000000;
  kernel.at<float>(3,4)=1.000000;
  kernel.at<float>(4,0)=1.000000;
  kernel.at<float>(4,1)=1.000000;
  kernel.at<float>(4,2)=1.000000;
  kernel.at<float>(4,3)=1.000000;
  kernel.at<float>(4,4)=1.000000;
  flip(kernel,flipkernel,-1);
  filter2D(Y, dst[12], ddepth , flipkernel, Point(flipkernel.cols-anchor.x-1,flipkernel.rows-anchor.y-1), delta, BORDER_DEFAULT );

  //Applying NB Mask No. 2
  kernel.at<float>(0,0)=1.000000;
  kernel.at<float>(0,1)=1.000000;
  kernel.at<float>(0,2)=1.000000;
  kernel.at<float>(0,3)=1.000000;
  kernel.at<float>(0,4)=1.000000;
  kernel.at<float>(1,0)=1.000000;
  kernel.at<float>(1,1)=1.000000;
  kernel.at<float>(1,2)=1.000000;
  kernel.at<float>(1,3)=1.000000;
  kernel.at<float>(1,4)=1.000000;
  kernel.at<float>(2,0)=1.000000;
  kernel.at<float>(2,1)=1.000000;
  kernel.at<float>(2,2)=1.000000;
  kernel.at<float>(2,3)=1.000000;
  kernel.at<float>(2,4)=1.000000;
  kernel.at<float>(3,0)=1.000000;
  kernel.at<float>(3,1)=1.000000;
  kernel.at<float>(3,2)=1.000000;
  kernel.at<float>(3,3)=1.000000;
  kernel.at<float>(3,4)=1.000000;
  kernel.at<float>(4,0)=1.000000;
  kernel.at<float>(4,1)=1.000000;
  kernel.at<float>(4,2)=1.000000;
  kernel.at<float>(4,3)=1.000000;
  kernel.at<float>(4,4)=1.000000;
  flip(kernel,flipkernel,-1);
  filter2D(Y, dst[13], ddepth , flipkernel, Point(flipkernel.cols-anchor.x-1,flipkernel.rows-anchor.y-1), delta, BORDER_DEFAULT );

  //Applying NB Mask No. 3
  kernel.at<float>(0,0)=1.000000;
  kernel.at<float>(0,1)=1.000000;
  kernel.at<float>(0,2)=1.000000;
  kernel.at<float>(0,3)=1.000000;
  kernel.at<float>(0,4)=1.000000;
  kernel.at<float>(1,0)=1.000000;
  kernel.at<float>(1,1)=1.000000;
  kernel.at<float>(1,2)=1.000000;
  kernel.at<float>(1,3)=1.000000;
  kernel.at<float>(1,4)=1.000000;
  kernel.at<float>(2,0)=1.000000;
  kernel.at<float>(2,1)=1.000000;
  kernel.at<float>(2,2)=1.000000;
  kernel.at<float>(2,3)=1.000000;
  kernel.at<float>(2,4)=1.000000;
  kernel.at<float>(3,0)=1.000000;
  kernel.at<float>(3,1)=1.000000;
  kernel.at<float>(3,2)=1.000000;
  kernel.at<float>(3,3)=1.000000;
  kernel.at<float>(3,4)=1.000000;
  kernel.at<float>(4,0)=1.000000;
  kernel.at<float>(4,1)=1.000000;
  kernel.at<float>(4,2)=1.000000;
  kernel.at<float>(4,3)=1.000000;
  kernel.at<float>(4,4)=1.000000;
  flip(kernel,flipkernel,-1);
  filter2D(Y, dst[14], ddepth , flipkernel, Point(flipkernel.cols-anchor.x-1,flipkernel.rows-anchor.y-1), delta, BORDER_DEFAULT );

  //Applying NB Mask No. 4
  kernel.at<float>(0,0)=1.000000;
  kernel.at<float>(0,1)=1.000000;
  kernel.at<float>(0,2)=1.000000;
  kernel.at<float>(0,3)=1.000000;
  kernel.at<float>(0,4)=1.000000;
  kernel.at<float>(1,0)=1.000000;
  kernel.at<float>(1,1)=1.000000;
  kernel.at<float>(1,2)=1.000000;
  kernel.at<float>(1,3)=1.000000;
  kernel.at<float>(1,4)=1.000000;
  kernel.at<float>(2,0)=1.000000;
  kernel.at<float>(2,1)=1.000000;
  kernel.at<float>(2,2)=1.000000;
  kernel.at<float>(2,3)=1.000000;
  kernel.at<float>(2,4)=1.000000;
  kernel.at<float>(3,0)=1.000000;
  kernel.at<float>(3,1)=1.000000;
  kernel.at<float>(3,2)=1.000000;
  kernel.at<float>(3,3)=1.000000;
  kernel.at<float>(3,4)=1.000000;
  kernel.at<float>(4,0)=1.000000;
  kernel.at<float>(4,1)=1.000000;
  kernel.at<float>(4,2)=1.000000;
  kernel.at<float>(4,3)=1.000000;
  kernel.at<float>(4,4)=1.000000;
  flip(kernel,flipkernel,-1);
  filter2D(Y, dst[15], ddepth , flipkernel, Point(flipkernel.cols-anchor.x-1,flipkernel.rows-anchor.y-1), delta, BORDER_DEFAULT );

  //Applying NB Mask No. 5
  kernel.at<float>(0,0)=1.000000;
  kernel.at<float>(0,1)=1.000000;
  kernel.at<float>(0,2)=1.000000;
  kernel.at<float>(0,3)=1.000000;
  kernel.at<float>(0,4)=1.000000;
  kernel.at<float>(1,0)=1.000000;
  kernel.at<float>(1,1)=1.000000;
  kernel.at<float>(1,2)=1.000000;
  kernel.at<float>(1,3)=1.000000;
  kernel.at<float>(1,4)=1.000000;
  kernel.at<float>(2,0)=1.000000;
  kernel.at<float>(2,1)=1.000000;
  kernel.at<float>(2,2)=1.000000;
  kernel.at<float>(2,3)=1.000000;
  kernel.at<float>(2,4)=1.000000;
  kernel.at<float>(3,0)=1.000000;
  kernel.at<float>(3,1)=1.000000;
  kernel.at<float>(3,2)=1.000000;
  kernel.at<float>(3,3)=1.000000;
  kernel.at<float>(3,4)=1.000000;
  kernel.at<float>(4,0)=1.000000;
  kernel.at<float>(4,1)=1.000000;
  kernel.at<float>(4,2)=1.000000;
  kernel.at<float>(4,3)=1.000000;
  kernel.at<float>(4,4)=1.000000;
  flip(kernel,flipkernel,-1);
  filter2D(Y, dst[16], ddepth , flipkernel, Point(flipkernel.cols-anchor.x-1,flipkernel.rows-anchor.y-1), delta, BORDER_DEFAULT );

  //Applying NB Mask No. 6
  kernel.at<float>(0,0)=1.000000;
  kernel.at<float>(0,1)=1.000000;
  kernel.at<float>(0,2)=1.000000;
  kernel.at<float>(0,3)=1.000000;
  kernel.at<float>(0,4)=1.000000;
  kernel.at<float>(1,0)=1.000000;
  kernel.at<float>(1,1)=1.000000;
  kernel.at<float>(1,2)=1.000000;
  kernel.at<float>(1,3)=1.000000;
  kernel.at<float>(1,4)=1.000000;
  kernel.at<float>(2,0)=1.000000;
  kernel.at<float>(2,1)=1.000000;
  kernel.at<float>(2,2)=1.000000;
  kernel.at<float>(2,3)=1.000000;
  kernel.at<float>(2,4)=1.000000;
  kernel.at<float>(3,0)=1.000000;
  kernel.at<float>(3,1)=1.000000;
  kernel.at<float>(3,2)=1.000000;
  kernel.at<float>(3,3)=1.000000;
  kernel.at<float>(3,4)=1.000000;
  kernel.at<float>(4,0)=1.000000;
  kernel.at<float>(4,1)=1.000000;
  kernel.at<float>(4,2)=1.000000;
  kernel.at<float>(4,3)=1.000000;
  kernel.at<float>(4,4)=1.000000;
  flip(kernel,flipkernel,-1);
  filter2D(Y, dst[17], ddepth , flipkernel, Point(flipkernel.cols-anchor.x-1,flipkernel.rows-anchor.y-1), delta, BORDER_DEFAULT );

